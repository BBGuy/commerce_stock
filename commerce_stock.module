<?php

/**
 * @file
 * Allow commerce products to have stock levels associated with their SKU
 *
 * Commerce Stock enables Commerce to manage stock for products. Store admins
 * can set the stock levels and a threshold on a product edit page.
 * When that threshold is reached admins can be optionally notified about the
 * current stock level. Store admins can view all stock levels using views.
 */


/**
 * Implements hook_form_alter().
 *
 * Alters the add-to-cart form to show out-of-stock items and add a validator.
 */
function commerce_stock_form_alter(&$form, &$form_state, $form_id){
  if (strpos($form_id, "commerce_cart_add_to_cart_form") === 0) {
    // check if product is disabled
    if ( isset($form['submit']['#disabled']) && ($form['submit']['#disabled']) ) {
      return;
    }
    // Check to see if product has options (multiple products using
    // the default dropdown)
    if(isset($form['product_id']['#options']) ){
      // Set validation
      $form['#validate'][] = 'commerce_stock_add_to_cart_validate';
      commerce_stock_cart_state_validate_options($form);
    }
    // A single product or uses attributes (like colour & size).
    else {
      // @todo new rules event for handling options - do we need it?
      // Add validation to the add to cart
      $form['#validate'][] = 'commerce_stock_add_to_cart_validate';
      // check if the add to cart form should be enabled (in stock)
      commerce_stock_cart_state_validate($form);
    }
  }
  elseif ($form_id == 'views_form_commerce_cart_form_default') {
    // Add validate function to the checkout form
    $form['#validate'][] = 'commerce_stock_form_commerce_cart_validate';
  }
  elseif ($form_id == 'commerce_checkout_form_checkout') {
    // Add validate function to the checkout form
    $form['buttons']['continue']['#validate'][] = 'commerce_stock_checkout_form_validate';
  }
}



/**
 * Implements hook_commerce_checkout_pane_info().
 *
 * Creates the stock checkout pane:
 * Should be placed on the first stage of checkout.
 * when loads checks if all items in stock and if not redirects
 * you to the cart.
 */
function commerce_stock_commerce_checkout_pane_info() {
  $checkout_panes = array();

  $checkout_panes['stock_validation_checkout_pane'] = array(
    'title' => t('check if all items are in stock at checkout'),
    'base' => 'commerce_stock_commerce_checkout_pane',
    'page' => 'checkout',
    'fieldset' => FALSE,
  );

  return $checkout_panes;
}


/***[ form validation ]****/



/**
* Form validate handler: add to cart
* For products with options (product dropdown)
* check if the add to cart form should be enabled (in stock)
*
*/
function commerce_stock_cart_state_validate_options(&$form) {

  $product_id = $form['product_id']['#default_value'];
  $product = commerce_product_load($product_id);
  $qty_ordered = commerce_stock_check_cart_product_level($product_id);

  // Initialize the form
  $form['submit']['#value'] = 'Add to cart';
  $form['submit']['#disabled'] = FALSE;
  $form['#attributes']['class']['stock'] = 'in-stock';



  global $stock_cart_check_data;
  $stock_cart_check_data = array(
    'form' => &$form,
  );
  // invoke the stock check event
  rules_invoke_event('commerce_stock_check_add_to_cart_state', $product, $qty_ordered, $form);
}


/**
* Form validate handler: add to cart
* For product dispaly with one product or attributes
* validate the product and quantity to add to the cart.
* check if the add to cart form should be enabled (in stock)
*/
function commerce_stock_add_to_cart_validate($form, &$form_state) {
  if ($form_state['submitted']) {
  // Get product and qty
    $qty = $form_state['values']['quantity'];
    $product_id = $form_state['values']['product_id'];
    $product = commerce_product_load($product_id);
    $qty_ordered = commerce_stock_check_cart_product_level($product_id);
    // check using rules
    commerce_stock_check_product_rule($product, $qty, $qty_ordered, $stock_state, $message);
    // action
    if ($stock_state == 1) {
      form_set_error("stock_error", $message);
    }
    else if ($stock_state == 2) {
      $form_state['values']['quantity'] = $qty;
      drupal_set_message($message);
    }
  }
}


/**
 * Form validate handler: Cart form.
 *
 * Checks each line item to make sure that they have not requested more items
 * than we have in stock.
 */
function commerce_stock_form_commerce_cart_validate($form, &$form_state) {
  // if user chose to remove an item then valid
  if ($form_state['triggering_element']['#value'] == 'Remove') {
    return;
  }
  $line_item_index = array_keys($form_state['line_items']);
  foreach ($form_state['values']['edit_quantity'] as $index => $qty) {
    $line_item = $form_state['line_items'][$line_item_index[$index]];
    $line_item_wrapper = entity_metadata_wrapper('commerce_line_item', $line_item);
    $product_id = $line_item_wrapper->commerce_product->product_id->value();
    $product = commerce_product_load($product_id);
    $qty_ordered = commerce_stock_check_cart_product_level($product_id);

    // check using rules
    commerce_stock_check_product_checkout_rule($product, $qty_ordered, $stock_state, $message);
    // @todo: TEST and update error structure
    if ($stock_state == 1) {
      form_set_error("stock_error", $message);
    }
    else if ($stock_state == 2) {
      drupal_set_message($message);
      // @todo set aproved qty ????
    }

  }
}


/**
 * Form validate handler: validate checkout form.
 *
 * Make sure all items in the cart are in stock before continuing
 * should not get this far as this is now handled by the
 * stock checkout pane, but as that can be disabled may be safe to
 * keep this extra check.
 */
function commerce_stock_checkout_form_validate($form, &$form_state) {
  $order_wrapper = entity_metadata_wrapper('commerce_order', $form_state['order']);
  commerce_stock_checkout_validate($order_wrapper);
}



/***[ pane validation ]****/

/**
 * The stock checkout pane form: call stock the validation when
 * displaying the form this will alow us to redirect the user
 * before he starts checkout
 */
function commerce_stock_commerce_checkout_pane_checkout_form($form, &$form_state, $checkout_pane, $order) {
  $order_wrapper = entity_metadata_wrapper('commerce_order', $form_state['order']);
  commerce_stock_checkout_validate($order_wrapper);
}


/***[ util funcs ]****/



/**
* check if the add to cart form should be enabled (in stock)
*
*/
function commerce_stock_cart_state_validate(&$form) {

  $product_id = $form['product_id']['#value'];
  $product = commerce_product_load($product_id);
  $qty_ordered = commerce_stock_check_cart_product_level($product_id);

  // Initialize the form
  $form['submit']['#value'] = 'Add to cart';
  $form['submit']['#disabled'] = FALSE;
  $form['#attributes']['class']['stock'] = 'in-stock';



  global $stock_cart_check_data;
  $stock_cart_check_data = array(
    'form' => &$form,
  );
  // invoke the stock check event
  rules_invoke_event('commerce_stock_check_add_to_cart_state', $product, $qty_ordered);
}











/**
 *
 * check if product is in the cart and return the quentity if it is
 */
function commerce_stock_check_cart_product_level($product_id) {
  $cart_qty = 0;
  global $user;
  // load the current cart
  $order = commerce_cart_order_load($user->uid);
  if ($order) {
    // cycle throw each line item ID
    foreach($order->commerce_line_items['und'] as $line_item_id){
       // load each line item in the cart and check if $product_id
       $line_item = commerce_line_item_load($line_item_id['line_item_id']);
       if($line_item->commerce_product['und'][0]['product_id'] == $product_id){
         $cart_qty += $line_item->quantity;
       }
     }
  }
  return $cart_qty;
}

/**
 *
 * check stock using rules
 * Invoke the rule event and return the result of its action
 *
 */
function commerce_stock_check_product_rule($product, &$qty, $qty_ordered, &$stock_state, &$message) {

  // set defaults to the global stock check array
  global $stock_check_data;
  $stock_check_data = array(
    'state' => '0',  // default to ok
    'message' => '',
    'qty' => $qty
  );

  // invoke the stock check event
  rules_invoke_event('commerce_stock_check_product', $product, $qty, $qty_ordered, $qty + $qty_ordered);

  // if state not ok/do nothing then return the valuse set by the action
  if ($stock_check_data['state'] <> 0) {
    $stock_state = $stock_check_data['state'];
    $message = $stock_check_data['message'];
    $qty = $stock_check_data['qty'];
  }

}

/**
 *
 * check stock using rules at the point of checkout
 * Invoke the rule event and return the result of its action
 *
 */
function commerce_stock_check_product_checkout_rule($product, $qty_ordered, &$stock_state, &$message) {

  // set defaults to the global stock check array
  global $stock_check_data;
  $stock_check_data = array(
    'state' => '0',  // default to ok
    'message' => '',
    'qty' => $qty_ordered
  );

  // invoke the stock check event
  rules_invoke_event('commerce_stock_check_product_checkout', $product, $qty_ordered);

  // if state not ok/do nothing then return the valuse set by the action
  if ($stock_check_data['state'] <> 0) {
    $stock_state = $stock_check_data['state'];
    $message = $stock_check_data['message'];
    $qty = $stock_check_data['qty'];
  }

}







/**
 * Form after_build handler: validate the product is in stock.
 */
function commerce_stock_form_after_build($form, &$form_state) {
  $prod_id = $form['product_id']['#value'];
  if ( isset($form['product_id']['#stock_enabled']) && isset($form['product_id']['#stock_enabled'][$prod_id]) && $form['product_id']['#stock_enabled'][$prod_id] ) {
    if ( isset($form['product_id']['#stock']) && isset($form['product_id']['#stock'][$prod_id]) ) {
      $prod_stock = $form['product_id']['#stock'][$prod_id];
      if ($prod_stock <= 0) {
        // remove the add to cart button
        $form['submit']['#access'] = FALSE;
        // remove quantity if enabled
        if (isset($form['submit'])) {
          $form['quantity']['#access'] = FALSE;
        }
      }
    }
  }
  return $form;
}








function commerce_stock_checkout_validate($order_wrapper) {
  $found_errors = FALSE;
  // Check each line item
  foreach ($order_wrapper->commerce_line_items as $index => $line_item_wrapper) {
    if(in_array($line_item_wrapper->type->value(), commerce_product_line_item_types())) {
      $product_id = $line_item_wrapper->commerce_product->product_id->value();
      $product = commerce_product_load($product_id);
      $qty_ordered = commerce_stock_check_cart_product_level($product_id);
      // check using rules
      commerce_stock_check_product_checkout_rule($product, $qty_ordered, $stock_state, $message);
      // @todo: TEST and update error structure
      if ($stock_state == 1) {
        form_set_error("stock_error", $message . $stock_state);
        $found_errors = TRUE;
      }
      else if ($stock_state == 2) {
        drupal_set_message($message. $stock_state);
        // @todo set aproved qty ????
      }
    }
  }
  // if out of stock items send back to the cart form
  if ($found_errors) {
    drupal_set_message(t('please adjust quantities before continuing to checkout') );
    $cart_url = url('cart', array('absolute' => TRUE));
    drupal_goto( $cart_url);
  }
}



/**
 * Determine whether an order has items which are out of stock.
 *
 * @param $order
 *   An order object
 *
 * @return
 *   Boolean: TRUE if the order has items which are out of stock and
 *   FALSE otherwise.
 */
function commerce_stock_order_has_out_of_stock($order) {
  $line_items = $order->commerce_line_items['und'];
  foreach ($line_items as $line_item_id ) {
    $line_item = commerce_line_item_load($line_item_id['line_item_id']);
    if(in_array($line_item->type, commerce_product_line_item_types())) {
      $product = commerce_product_load($line_item->commerce_product['und'][0]['product_id']);
      $prod_id = $line_item->commerce_product['und'][0]['product_id'];
      $qry = $line_item->quantity;
      if(commerce_stock_product_check_out_of_stock($prod_id, $qry, $remaining_stock) != FALSE) {
        return TRUE;
      }
    }
  }

  return FALSE;
}


/**
 * Check whether a purrchase quantity exceeds what is available.
 *
 * @param $product_id
 *   The numeric product ID
 * @param $quantity
 *   Quantity to be purchased.
 * @param $remaining_stock
 *   the level of stock that can be ordered if
 *   commerce_stock_override is not enabled will not be less then 0.
 *
 * @return
 *   FALSE if the product request can be satisfied.
 *   The number available otherwise.
 */
function commerce_stock_product_check_out_of_stock($product_id ,$quantity, &$remaining_stock) {
  $product = commerce_product_load($product_id);
  // @todo: We shouldn't be using 'und' here should we?
  if(isset($product->commerce_stock['und'])){
    if ((isset($product->commerce_stock_override['und']) && $product->commerce_stock_override['und'][0]['value'] == 1)) {
     return FALSE;
    }
    // how many do we have for sale, cant be less than zero
    $remaining_stock = $product->commerce_stock['und'][0]['value'];
    if ($remaining_stock < 0) {
      $remaining_stock = 0;
    }
    if( ($remaining_stock < $quantity)) {
      return TRUE;
    }
    else  {
      return FALSE;
    }
  }
  else {
    return FALSE;
  }
}


/**
 * Given a product type, determine whether stock management is enabled on that
 * product type.
 *
 * @param $type
 *   The product type.
 *
 * @return
 *   Boolean: TRUE if stock management is enabled.
 */
function commerce_stock_product_type_enabled($type) {
  $instance = field_info_instance('commerce_product', 'commerce_stock', $type);
  return (!empty($instance));
}

/**
 * Given a product type, determine whether stock management override is enabled
 * on that product type.
 *
 * @param $type
 *   The product type.
 *
 * @return
 *   Boolean: TRUE if stock management override is enabled.
 */
function commerce_stock_product_type_override_enabled($type) {
  $instance = field_info_instance('commerce_product', 'commerce_stock_override', $type);
  return (!empty($instance));
}

/**
 * Given a product, determine whether stock management is enabled for that
 * product.
 *
 * @param $product
 *   The product to check.
 *
 * @return
 *   Boolean: TRUE if stock management is enabled on the product's product type.
 */
function commerce_stock_product_enabled($product) {
  return commerce_stock_product_type_enabled($product->type);
}

/**
 * Given a line item, determine whether stock management is enabled for that
 * line item.
 *
 * @param $line_item
 *   The line item to check.
 *
 * @return
 *   Boolean: TRUE if stock management is enabled on the product's product type.
 */
function commerce_stock_line_item_product_enabled($line_item) {
  return commerce_stock_product_type_enabled($line_item->product->type);
}


// New code


// @todo: move to sub module


/**
 * Implements hook_menu().
 */
function commerce_stock_menu() {
  $items = array();

  $items['admin/commerce/config/stock'] = array(
    'title' => 'Stock management',
    'description' => 'Configure stock management.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_stock_admin_form'),
    'access arguments' => array('administer commerce_product entities'),
    'file' => 'includes/commerce_stock.admin.inc',
  );
  return $items;
}

/**
* Implements hook_entity_property_info_alter()
*
*/
function commerce_stock_entity_property_info_alter(&$info) {
  // Copy metadata about our stock field from the product bundle to the
  // commerce_product entity
  if (!empty($info['commerce_product']['bundles'])) {
    $properties = array();

    foreach ($info['commerce_product']['bundles'] as $bundle => $bundle_info) {
      $bundle_info += array('properties' => array());
      $properties += $bundle_info['properties'];
    }

    if ( isset($properties['commerce_stock'])) {
      $info['commerce_product']['properties']['commerce_stock'] = $properties['commerce_stock'];
    }
    if ( isset($properties['commerce_stock_override'])) {
      $info['commerce_product']['properties']['commerce_stock_override'] = $properties['commerce_stock_override'];
    }

  }
}
