<?php

/**
 * @file
 * Install update and uninstall functions for the Commerce Stock Storage module.
 */

/**
 * Implements hook_schema().
 */
function commerce_stock_s_schema() {

  $schema['cs_inventory_location'] = [
    'description' => 'List of locations/warehouse form commerce stock.',
    'fields' => [
      'locid' => [
        'description' => 'Primary Key: Location ID.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ],
      'name' => [
        'description' => 'The name of the locations/warehous',
        'type' => 'varchar_ascii',
        'not null' => TRUE,
        'default' => '',
        'length' => 128,
      ],
      'status' => [
        'description' => 'Boolean indicating whether the location is active.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ],
    ],
    'primary key' => ['locid'],
  ];

  $schema['cs_inventory_transaction_type'] = [
    'description' => 'The Type of  transaction.',
    'fields' => [
      'ttid' => [
        'description' => 'Primary Key: transaction type ID.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ],
      'name' => [
        'description' => 'The name of the transaction type',
        'type' => 'varchar_ascii',
        'not null' => TRUE,
        'default' => '',
        'length' => 128,
      ],
      'parent_ttid' => [
        'description' => 'The parent transaction (no more then one level nesting)',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ],
    ],
    'primary key' => ['ttid'],
    'foreign keys' => [
      'parent_type' => [
        'table' => 'cs_inventory_transaction_type',
        'columns' => [
          'parent_ttid' => 'ttid',
        ],
      ],
    ],

  ];

  $schema['cs_inventory_transaction'] = [
    'description' => 'Stores inventory transactions form commerce stock.',
    'fields' => [
      'trid' => [
        'description' => 'Primary Key: unique transactions ID.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ],
      'variation_id' => [
        'description' => 'The referenced product variation',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ],
      'qty' => [
        'description' => 'The quentity',
        'type' => 'numeric',
        'size' => 'normal',
        'not null' => TRUE,
        'default' => 0,
        'precision' => 10,
        'scale' => 2,
      ],
      'location_id' => [
        'description' => 'The location ID (locid).',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ],
      'location_zone' => [
        'description' => 'the zone in: aisle.bay.shelf.bin format',
        'type' => 'varchar_ascii',
        'length' => 28,
        'not null' => TRUE,
        'default' => '',
      ],
      'unit_cost' => [
        'description' => 'The amount paid per unit',
        'type' => 'numeric',
        'size' => 'normal',
        'precision' => 19,
        'scale' => 6,
      ],
      'transaction_time' => [
        'type' => 'int',
        'not null' => TRUE,
        'description' => 'The date & time of the transaction',
      ],
      'transaction_type_id' => [
        'description' => 'transaction type ID.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ],
      // Metadata.
      'related_tid' => [
        'description' => 'related transaction.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
      ],
      'related_oid' => [
        'description' => 'related order.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
      ],
      'related_uid' => [
        'description' => 'related user.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
      ],
      'data' => [
        'type' => 'blob',
        'not null' => FALSE,
        'size' => 'big',
        'description' => 'Serialized data array.',
      ],

    ],
    'primary key' => ['trid'],
    'foreign keys' => [
      'location' => [
        'table' => 'cs_inventory_location',
        'columns' => [
          'location_id' => 'locid',
        ],
      ],
      'transaction_type' => [
        'table' => 'cs_inventory_transaction_type',
        'columns' => [
          'transaction_type_id' => 'ttid',
        ],
      ],
      'related_transaction' => [
        'table' => 'cs_inventory_transaction',
        'columns' => [
          'related_tid' => 'trid',
        ],
      ],
      'related_order' => [
        'table' => 'commerce_order',
        'columns' => [
          'related_oid' => 'order_id',
        ],
      ],
      'related_user' => [
        'table' => 'users',
        'columns' => [
          'related_uid' => 'uid',
        ],
      ],
    ],
  ];

  $schema['cs_inventory_location_level'] = [
    'description' => 'Stock Level at a location.',
    'fields' => [
      'location_id' => [
        'description' => 'The location ID (locid).',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ],
      'variation_id' => [
        'description' => 'The referenced product variation',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ],
      'qty' => [
        'description' => 'The quentity',
        'type' => 'numeric',
        'size' => 'normal',
        'not null' => TRUE,
        'default' => 0,
        'precision' => 10,
        'scale' => 2,
      ],
      'last_transaction_id' => [
        'description' => 'The last transaction that was used to calculate the total quentity to.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ],

    ],
    'primary key' => ['location_id', 'variation_id'],
    'foreign keys' => [
      'location' => [
        'table' => 'cs_inventory_location',
        'columns' => [
          'location_id' => 'locid',
        ],
      ],
    ],
  ];

  return $schema;
}

/**
 * Implements hook_install().
 */
function commerce_stock_s_install() {
  $db = \Drupal::database();
  // Add primary stock location.
  $db->insert('cs_inventory_location')
    ->fields([
      'name' => 'Main',
      'status' => 1,
    ])
    ->execute();

  // Add core transaction types.
  $db->insert('cs_inventory_transaction_type')
    ->fields([
      'ttid' => 1,
      'name' => 'Stock in',
      'parent_ttid' => 1,
    ])
    ->execute();
  $db->insert('cs_inventory_transaction_type')
    ->fields([
      'ttid' => 2,
      'name' => 'Stock Out',
      'parent_ttid' => 2,
    ])
    ->execute();
  // Add sub transaction types.
  $db->insert('cs_inventory_transaction_type')
    ->fields([
      'ttid' => 4,
      'name' => 'Sale',
      'parent_ttid' => 2,
    ])
    ->execute();
  $db->insert('cs_inventory_transaction_type')
    ->fields([
      'ttid' => 5,
      'name' => 'Return',
      'parent_ttid' => 1,
    ])
    ->execute();
  $db->insert('cs_inventory_transaction_type')
    ->fields([
      'ttid' => 6,
      'name' => 'New Stock',
      'parent_ttid' => 1,
    ])
    ->execute();
  $db->insert('cs_inventory_transaction_type')
    ->fields([
      'ttid' => 7,
      'name' => 'Move From',
      'parent_ttid' => 2,
    ])
    ->execute();
  $db->insert('cs_inventory_transaction_type')
    ->fields([
      'ttid' => 8,
      'name' => 'Move To',
      'parent_ttid' => 1,
    ])
    ->execute();
}
