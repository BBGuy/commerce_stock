<?php

/**
 * @file
 * Allow commerce products to have stock levels associated with their SKU
 *
 * commerce_stock enables commerce to manage stock for products. Store admins
 * can set the stock levels and a threshold on a product edit page.
 * When that threshold is reached admins can be optionally notified about the
 * current stock level. Store admins can view all stock levels using views.
 */

/**
 * Implements hook_menu().
 */
function commerce_stock_menu() {
  $items = array();

  $items['admin/commerce/config/stock'] = array(
    'title' => 'Stock management',
    'description' => 'Configure stock management.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_stock_admin_form'),
    'access arguments' => array('administer products'),
    'file' => 'includes/commerce_stock.admin.inc',
  );
  return $items;
}



/**
 * Implements hook_form_alter().
 * Alters the add-to-cart form to show out-of-stock items and add a validator.
 */
function commerce_stock_form_alter(&$form, &$form_state, $form_id){
  if(strpos($form_id, "commerce_cart_add_to_cart_form") === 0) {
    $stock = array();
    // check to see if product has attributes
    if(isset($form['product_id']['#options']) ){
      $options = $form['product_id']['#options'];
      foreach ($options as $key=>$value) {
        $product = commerce_product_load($key);
        //dpm ($product);
        if(!empty($product->commerce_stock['und'])){
          $stock[$key] = $product->commerce_stock['und'][0]['value'];
          if(($product->commerce_stock['und'][0]['value'] <= 0) && ($product->commerce_stock['und'])){
            $form['product_id']['#options'][$key]  .= ' - ' . t('Out of Stock');
          }
        }
      }//end foreach
      $form['product_id']['#element_validate'] = array ('commerce_stock_option_validate');
      $form['product_id']['#stock'] = $stock;

    }
    // product has options
    else {
      $product = commerce_product_load($form['product_id']['#value']);

      if(isset($product->commerce_stock['und']) ){
        if($product->commerce_stock['und'][0]['value'] <= 0){
          $form['submit']['#value'] = t('Out of Stock');
          $form['submit']['#disabled'] = TRUE;
        }
      }
    }// product has no options
  }//end if
}

/**
 * Form validate handler: validate the product and quantity to add to the cart.
 */
function commerce_stock_option_validate($element, &$form_state) {
  $stock = array();
  $options = $element['#options'];

  foreach ($options as $key=>$value) {
    $product = commerce_product_load($key);
    if(!empty($product->commerce_stock['und'])){
      $stock[$key] = $product->commerce_stock['und'][0]['value'];
    }
  }

  if($form_state['values']['quantity'] > $element['#stock'][$form_state['values']['product_id']]) {
    form_error($element, t('Product is out of Stock'));
  }
}



function commerce_stock_order_has_out_of_stock($order) {
  $line_items = $order->commerce_line_items['und'];
  foreach ($line_items as $line_item_id ) {
    $line_item = commerce_line_item_load($line_item_id['line_item_id']);
    if($line_item->type == 'product') {
      $product = commerce_product_load($line_item->commerce_product['und'][0]['product_id']);
      if(commerce_stock_product_check_out_of_stock($line_item->commerce_product['und'][0]['product_id'],$line_item->quantity ) != FALSE) {
        return TRUE;
      }
    }// end if line item == product
  }// end foreach
  return FALSE;

}//function


/*
check is a product id has more stock that $quantity
if so  it returns false
if there are not enough in stock it returns the stock level of product
*/

function commerce_stock_product_check_out_of_stock($product_id ,$quantity) {
  $product = commerce_product_load($product_id);
  if(isset($product->commerce_stock['und'])){
    if($product->commerce_stock['und'][0]['value'] < $quantity) {
      return $product->commerce_stock['und'][0]['value'];
    }
    else  {
      return FALSE;
    }
  }
}

/**
 * Ensures a stock field is present on a product type bundle.
 */
function commerce_stock_configure_product_type($type) {
  commerce_stock_create_instance('commerce_stock', 'commerce_product', $type, t('Stock'));
}


/**
 * Creates a required, locked instance of a stock field on the specified bundle.
 *
 * @param $field_name
 *   The name of the field; if it already exists, a new instance of the existing
 *     field will be created. For fields governed by the Commerce modules, this
 *     should begin with commerce_.
 * @param $entity_type
 *   The type of entity the field instance will be attached to.
 * @param $bundle
 *   The bundle name of the entity the field instance will be attached to.
 * @param $label
 *   The label of the field instance.
 * @param $weight
 *   The default weight of the field instance widget and display.
 */
function commerce_stock_create_instance($field_name, $entity_type, $bundle, $label, $weight = 0) {
  // If a field type we know should exist isn't found, clear the Field cache.
//  if (!field_info_field_types('commerce_stock')) {
//    field_cache_clear();
//  }

  // Look for or add the specified stock field to the requested entity bundle.
  $field = field_info_field($field_name);
  $instance = field_info_instance($entity_type, $field_name, $bundle);

  if (empty($field)) {
    $field = array(
      'field_name' => $field_name,
      'type' => 'number_integer',
      'cardinality' => 1,
      'entity_types' => array($entity_type),
      'translatable' => FALSE,
      'locked' => TRUE,
    );
    $field = field_create_field($field);
  }

  if (empty($instance)) {
    $instance = array(
      'field_name' => $field_name,
      'entity_type' => $entity_type,
      'bundle' => $bundle,
      'label' => $label,
      'required' => TRUE,
      'settings' => array(),
      'display' => array(),
    );

    $entity_info = entity_get_info($entity_type);

    // Spoof the default view mode so its display type is set.
    $entity_info['view modes']['default'] = array();

    field_create_instance($instance);
  }
}

/**
 * Given a product type, determine whether stock management is enabled on that
 * product type.
 *
 * @param $type
 *   The product type.
 * @return
 *   Boolean: TRUE if stock management is enabled.
 */
function commerce_stock_product_type_enabled($type) {
  $instance = field_info_instance('commerce_product', 'commerce_stock', $type);
  return (!empty($instance));
}

/**
 * Given a product, determine whether stock management is enabled for that
 * product.
 *
 * @param $product
 *   The product to check.
 * @return
 *   Boolean: TRUE if stock management is enabled on the product's product type.
 */
function commerce_stock_product_enabled($product) {
  return commerce_stock_product_type_enabled($product->type);
}

/**
 * Given a product, determine whether stock management is enabled for that
 * product.
 *
 * @param $product
 *   The product to check.
 * @return
 *   Boolean: TRUE if stock management is enabled on the product's product type.
 */
function commerce_stock_line_item_product_enabled($line_item) {
  return commerce_stock_product_type_enabled($line_item->product->type);
}